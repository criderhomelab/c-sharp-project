
services:
  frontend:
    build:
      context: ../../
      target: final
    image: ghcr.io/timcrider/apps/compose-frontend
    env_file:
      - ../../.local
    environment:
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
      - ASPNETCORE_URLS=http://0.0.0.0:8080
      - DOTNET_SYSTEM_NET_DISABLEIPV6=true
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      mssql:
        condition: service_healthy
      mssql-setup:
        condition: service_completed_successfully

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - "127.0.0.1:1433:1433"
    env_file:
      - ../../.local
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_PID=Express
      - MSSQL_TCP_PORT=1433
      - MSSQL_IP_ADDRESS=0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S 127.0.0.1 -U sa -P $${SA_PASSWORD} -No -C -Q 'SELECT 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    volumes:
      - mssql_data:/var/opt/mssql

  mssql-setup:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      mssql:
        condition: service_healthy
    env_file:
      - ../../.local
    environment:
      - ACCEPT_EULA=Y
    command: >
      bash -c "
        echo 'Starting SQL Server database setup...'
        sleep 5
        
        echo 'Testing SQL Server connectivity...'
        RETRY_COUNT=0
        MAX_RETRIES=30
        while ! /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P \"$$SA_PASSWORD\" -No -C -Q \"SELECT 1\" >/dev/null 2>&1; do
          RETRY_COUNT=$$((RETRY_COUNT + 1))
          if [ $$RETRY_COUNT -ge $$MAX_RETRIES ]; then
            echo 'ERROR: SQL Server did not become ready after $$MAX_RETRIES attempts'
            exit 1
          fi
          echo \"SQL Server not ready yet, waiting... (attempt $$RETRY_COUNT/$$MAX_RETRIES)\"
          sleep 2
        done
        
        echo 'SQL Server is ready! Creating database and user...'
        
        /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P \"$$SA_PASSWORD\" -No -C -Q \"
        -- Drop existing login if it exists
        IF EXISTS (SELECT * FROM sys.server_principals WHERE name = 'WebAppUser')
          DROP LOGIN WebAppUser;
        
        -- Create login with password
        CREATE LOGIN WebAppUser WITH PASSWORD=N'$$WEBAPP_USER_PASSWORD', CHECK_POLICY=OFF, CHECK_EXPIRATION=OFF;
        PRINT 'WebAppUser login created successfully';
        
        -- Create database if it doesn't exist
        IF NOT EXISTS (SELECT * FROM sys.databases WHERE name = 'WebAppDB')
          CREATE DATABASE WebAppDB;
        PRINT 'WebAppDB database ready';
        \"
        
        echo 'Setting up database schema and permissions...'
        
        /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P \"$$SA_PASSWORD\" -No -C -d WebAppDB -Q \"
        -- Create table if it doesn't exist
        IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'[dbo].[things]') AND type in (N'U'))
        BEGIN
          CREATE TABLE things (
            id INT PRIMARY KEY IDENTITY (1, 1),
            created_on DATETIME NOT NULL DEFAULT GETDATE(),
            name VARCHAR (50) NOT NULL,
            purpose VARCHAR(255) NOT NULL,
            last_modified DATETIME NOT NULL
          );
          PRINT 'things table created';
        END
        
        -- Create database user if it doesn't exist
        IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'WebAppUser')
        BEGIN
          CREATE USER WebAppUser FOR LOGIN WebAppUser;
          PRINT 'WebAppUser database user created';
        END
        
        -- Grant permissions
        GRANT SELECT, INSERT, UPDATE, DELETE ON dbo.things TO WebAppUser;
        GRANT CREATE TABLE TO WebAppUser;
        ALTER ROLE db_datareader ADD MEMBER WebAppUser;
        ALTER ROLE db_datawriter ADD MEMBER WebAppUser;
        PRINT 'Permissions granted to WebAppUser';
        
        -- Insert sample data if table is empty
        IF NOT EXISTS (SELECT 1 FROM things)
        BEGIN
          PRINT 'Inserting sample data...';
          INSERT INTO things (name, purpose, last_modified) VALUES 
            ('Sample Item 1', 'Demonstration purpose', GETDATE()),
            ('Sample Item 2', 'Testing database connectivity', GETDATE()),
            ('Docker Container', 'Containerized database example', GETDATE());
          PRINT 'Sample data inserted successfully.';
        END
        \"
        
        echo 'âœ… Database setup completed successfully!'
      "
    restart: "no"

volumes:
  mssql_data:

networks:
  default:
    enable_ipv6: false
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "false"
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

