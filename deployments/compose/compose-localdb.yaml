# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  frontend:
    build:
      context: ../../
      target: final
    env_file:
      - ../../.local
    environment:
      - DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false
    ports:
      - 8080:8080
    depends_on:
      mssql:
        condition: service_healthy
      mssql-setup:
        condition: service_completed_successfully

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    ports:
      - 1433:1433
    env_file:
      - ../../.local
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${LOCAL_SA_PASSWORD}
      - MSSQL_PID=Express
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P $${SA_PASSWORD} -No -C -Q 'SELECT 1' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 30s
    volumes:
      - mssql_data:/var/opt/mssql

  mssql-setup:
    image: mcr.microsoft.com/mssql/server:2022-latest
    depends_on:
      mssql:
        condition: service_healthy
    env_file:
      - ../../.local
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${LOCAL_SA_PASSWORD}
    volumes:
      - ./mssql/setup_mssql_things.sql:/setup_mssql_things.sql:ro
    command: >
      bash -c "
        echo 'Waiting for SQL Server to be ready...'
        sleep 5
        echo 'Running database setup script...'
        /opt/mssql-tools18/bin/sqlcmd -S mssql -U sa -P ${LOCAL_SA_PASSWORD} -No -C -v WEBAPP_USER_PASSWORD='${WEBAPP_USER_PASSWORD}' -i /setup_mssql_things.sql
        echo 'Database setup complete!'
      "
    restart: "no"


# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

volumes:
  mssql_data:

